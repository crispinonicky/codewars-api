{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","username","setUserInfo","userData","setUserData","userSearch","setUserSearch","challengeInfo","setChallengeInfo","useEffect","corsAnywhere","getUser","e","user","axios","get","then","data","console","log","catch","err","preventDefault","getChallenge","challenge","className","onSubmit","type","value","onChange","target","onClick","honor","leaderboardPosition","showUserDetails","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAqJeA,MAjJf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGuBJ,oBAAS,GAHhC,mBAGNK,EAHM,KAGMC,EAHN,OAI6BN,mBAAS,IAJtC,mBAINO,EAJM,KAISC,EAJT,KAMbC,qBAAU,eAMV,IAAMC,EAAe,uCAKrB,SAASC,EAAQC,EAAGC,GAElBA,EAAOZ,EACPa,IACGC,IAAIL,EAAe,yCAA2CG,GAC9DG,MAAK,SAAAC,GACJC,QAAQC,IAAR,qCAA0ClB,EAA1C,MACAiB,QAAQC,IAAIF,EAAKA,MACjBX,GAAc,GACdF,EAAYa,EAAKA,SAElBG,OAAM,SAAAC,GAELH,QAAQC,IAAIE,MAEhBH,QAAQC,IAAI,iBAAkBlB,GAE9Ba,IACCC,IACCL,EACE,yCACAG,EACA,qCAEHG,MAAK,SAAAC,GACJC,QAAQC,IAAR,uCAA4CN,EAA5C,oBACAK,QAAQC,IAAIF,EAAKA,KAAKA,SAEvBG,OAAM,SAAAC,GACLH,QAAQC,IAAI,mBACZD,QAAQC,IAAIE,MAGdT,EAAEU,iBASJ,SAASC,EAAaX,EAAGY,GACvBA,EAAYjB,EACZO,IACGC,IACCL,EACE,mDACAc,GAEHR,MAAK,SAAAC,GACJC,QAAQC,IAAR,qCAA0CK,EAA1C,MACAN,QAAQC,IAAIF,EAAKA,SAElBG,OAAM,SAAAC,GACLH,QAAQC,IAAIE,MAEhBH,QAAQC,IAAI,mCAAoCZ,GAChDK,EAAEU,iBA6BJ,OACE,yBAAKG,UAAU,OACb,wBAAIA,UAAY,YACd,wBAAIA,UAAY,YACd,0BAAMC,SAAUf,GACd,kEAEE,2BAAOgB,KAAK,OAAOC,MAAO3B,EAAU4B,SAjChD,SAA0BjB,GACxBV,EAAYU,EAAEkB,OAAOF,WAkCb,2BACED,KAAK,SACLC,MAAM,SACNG,QAAS,SAAAnB,GAAC,OAAID,EAAQC,EAAG,CAAEX,iBA9BvC,WACE,IAAmB,IAAfI,EACF,OACA,wBAAIoB,UAAY,eAChB,yCACatB,EAASF,UAEtB,sCACUE,EAAS6B,OAEnB,sDAC0B7B,EAAS8B,sBAsB9BC,IAIH,4BACE,0BAAMR,SAAUH,GACd,wFAEE,2BACEI,KAAK,OACLC,MAAOrB,EACPsB,SAhDd,SAA+BjB,GAC7BJ,EAAiBI,EAAEkB,OAAOF,WAkDlB,2BACED,KAAK,SACLC,MAAM,SACNG,QAAS,SAAAnB,GAAC,OAAIW,EAAaX,EAAG,CAAEL,0BChI1B4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.7673ea12.chunk.js","sourcesContent":["import './App.css';\nimport axios from 'axios';\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [username, setUserInfo] = useState(\"\");\n  const [userData, setUserData] = useState(\"\");\n  const [userSearch, setUserSearch] = useState(false);\n  const [challengeInfo, setChallengeInfo] = useState(\"\");\n\n  useEffect(() => {\n    // console.log(\"User we are searching for (INFO): \", username);\n    // console.log(\"User we are searching for (CHALLENGES): \", userChallenges);\n    // console.log(\"Challenge we are searching for: \", challengeInfo);\n  });\n\n  const corsAnywhere = \"https://cors-anywhere.herokuapp.com/\";\n\n  // This function gets all of the information on a user, and\n  // returns all of the challenges they've completed:\n\n  function getUser(e, user) {\n    \n    user = username;\n    axios\n      .get(corsAnywhere + \"https://www.codewars.com/api/v1/users/\" + user)\n      .then(data => {\n        console.log(`This is the information on ${username}:`);\n        console.log(data.data);\n        setUserSearch(true)\n        setUserData(data.data)\n      })\n      .catch(err => {\n        // console.log(\"User not found!\")\n        console.log(err);\n      });\n    console.log(\"Searching for \", username);\n\n    axios\n    .get(\n      corsAnywhere +\n        \"https://www.codewars.com/api/v1/users/\" +\n        user +\n        \"/code-challenges/completed?page=0\"\n    )\n    .then(data => {\n      console.log(`Here are the challenges that ${user} has completed:`);\n      console.log(data.data.data);\n    })\n    .catch(err => {\n      console.log(\"User not found!\")\n      console.log(err);\n    });\n\n    e.preventDefault();\n  }\n\n  // Skipping authored challenges because very few students\n  // have created challenges of their own\n\n  // This function gives information on a codewars kata. \n  // It can accept either a title formatted-like-this or an ID:\n\n  function getChallenge(e, challenge) {\n    challenge = challengeInfo;\n    axios\n      .get(\n        corsAnywhere +\n          \"https://www.codewars.com/api/v1/code-challenges/\" +\n          challenge\n      )\n      .then(data => {\n        console.log(`Here is the information on ${challenge}:`);\n        console.log(data.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    console.log(\"Challenge we are searching for: \", challengeInfo);\n    e.preventDefault();\n  }\n\n  function handleChangeUser(e) {\n    setUserInfo(e.target.value);\n  }\n\n  function handleChangeChallenge(e) {\n    setChallengeInfo(e.target.value);\n  }\n\n  function showUserDetails() {\n    if (userSearch === true) {\n      return(\n      <ul className = \"userDetails\">\n      <li>\n        Username: {userData.username}\n      </li>\n      <li>\n        Honor: {userData.honor}\n      </li>\n      <li>\n        Leaderboard Position: #{userData.leaderboardPosition}\n      </li>\n    </ul>\n      )\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <ul className = \"theForms\">\n        <li className = \"userForm\">\n          <form onSubmit={getUser}>\n            <label>\n              Enter a user to show their info:\n              <input type=\"text\" value={username} onChange={handleChangeUser} />\n            </label>\n            <input\n              type=\"submit\"\n              value=\"Submit\"\n              onClick={e => getUser(e, { username })}\n            />\n          </form>\n          {showUserDetails()}\n        </li>\n\n\n        <li>\n          <form onSubmit={getChallenge}>\n            <label>\n              Enter a challenge here (name or ID) to show its stats:\n              <input\n                type=\"text\"\n                value={challengeInfo}\n                onChange={handleChangeChallenge}\n              />\n            </label>\n            <input\n              type=\"submit\"\n              value=\"Submit\"\n              onClick={e => getChallenge(e, { challengeInfo })}\n            />\n          </form>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}